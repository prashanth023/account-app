/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.account.app.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Account extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8983239205647910635L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Account\",\"namespace\":\"com.account.app.avro\",\"fields\":[{\"name\":\"accountName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"accountType\",\"type\":\"int\"},{\"name\":\"marketCap\",\"type\":\"int\"},{\"name\":\"customer\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Customer\",\"fields\":[{\"name\":\"customerName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerNum\",\"type\":\"long\"}]},\"default\":null}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Account> ENCODER =
      new BinaryMessageEncoder<Account>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Account> DECODER =
      new BinaryMessageDecoder<Account>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Account> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Account> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Account> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Account>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Account to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Account from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Account instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Account fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String accountName;
   private int accountType;
   private int marketCap;
   private java.util.List<com.account.app.avro.Customer> customer;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Account() {}

  /**
   * All-args constructor.
   * @param accountName The new value for accountName
   * @param accountType The new value for accountType
   * @param marketCap The new value for marketCap
   * @param customer The new value for customer
   */
  public Account(java.lang.String accountName, java.lang.Integer accountType, java.lang.Integer marketCap, java.util.List<com.account.app.avro.Customer> customer) {
    this.accountName = accountName;
    this.accountType = accountType;
    this.marketCap = marketCap;
    this.customer = customer;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return accountName;
    case 1: return accountType;
    case 2: return marketCap;
    case 3: return customer;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: accountName = value$ != null ? value$.toString() : null; break;
    case 1: accountType = (java.lang.Integer)value$; break;
    case 2: marketCap = (java.lang.Integer)value$; break;
    case 3: customer = (java.util.List<com.account.app.avro.Customer>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'accountName' field.
   * @return The value of the 'accountName' field.
   */
  public java.lang.String getAccountName() {
    return accountName;
  }



  /**
   * Gets the value of the 'accountType' field.
   * @return The value of the 'accountType' field.
   */
  public int getAccountType() {
    return accountType;
  }



  /**
   * Gets the value of the 'marketCap' field.
   * @return The value of the 'marketCap' field.
   */
  public int getMarketCap() {
    return marketCap;
  }



  /**
   * Gets the value of the 'customer' field.
   * @return The value of the 'customer' field.
   */
  public java.util.List<com.account.app.avro.Customer> getCustomer() {
    return customer;
  }



  /**
   * Creates a new Account RecordBuilder.
   * @return A new Account RecordBuilder
   */
  public static com.account.app.avro.Account.Builder newBuilder() {
    return new com.account.app.avro.Account.Builder();
  }

  /**
   * Creates a new Account RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Account RecordBuilder
   */
  public static com.account.app.avro.Account.Builder newBuilder(com.account.app.avro.Account.Builder other) {
    if (other == null) {
      return new com.account.app.avro.Account.Builder();
    } else {
      return new com.account.app.avro.Account.Builder(other);
    }
  }

  /**
   * Creates a new Account RecordBuilder by copying an existing Account instance.
   * @param other The existing instance to copy.
   * @return A new Account RecordBuilder
   */
  public static com.account.app.avro.Account.Builder newBuilder(com.account.app.avro.Account other) {
    if (other == null) {
      return new com.account.app.avro.Account.Builder();
    } else {
      return new com.account.app.avro.Account.Builder(other);
    }
  }

  /**
   * RecordBuilder for Account instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Account>
    implements org.apache.avro.data.RecordBuilder<Account> {

    private java.lang.String accountName;
    private int accountType;
    private int marketCap;
    private java.util.List<com.account.app.avro.Customer> customer;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.account.app.avro.Account.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.accountName)) {
        this.accountName = data().deepCopy(fields()[0].schema(), other.accountName);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.accountType)) {
        this.accountType = data().deepCopy(fields()[1].schema(), other.accountType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.marketCap)) {
        this.marketCap = data().deepCopy(fields()[2].schema(), other.marketCap);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.customer)) {
        this.customer = data().deepCopy(fields()[3].schema(), other.customer);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Account instance
     * @param other The existing instance to copy.
     */
    private Builder(com.account.app.avro.Account other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.accountName)) {
        this.accountName = data().deepCopy(fields()[0].schema(), other.accountName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.accountType)) {
        this.accountType = data().deepCopy(fields()[1].schema(), other.accountType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.marketCap)) {
        this.marketCap = data().deepCopy(fields()[2].schema(), other.marketCap);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.customer)) {
        this.customer = data().deepCopy(fields()[3].schema(), other.customer);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'accountName' field.
      * @return The value.
      */
    public java.lang.String getAccountName() {
      return accountName;
    }


    /**
      * Sets the value of the 'accountName' field.
      * @param value The value of 'accountName'.
      * @return This builder.
      */
    public com.account.app.avro.Account.Builder setAccountName(java.lang.String value) {
      validate(fields()[0], value);
      this.accountName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'accountName' field has been set.
      * @return True if the 'accountName' field has been set, false otherwise.
      */
    public boolean hasAccountName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'accountName' field.
      * @return This builder.
      */
    public com.account.app.avro.Account.Builder clearAccountName() {
      accountName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'accountType' field.
      * @return The value.
      */
    public int getAccountType() {
      return accountType;
    }


    /**
      * Sets the value of the 'accountType' field.
      * @param value The value of 'accountType'.
      * @return This builder.
      */
    public com.account.app.avro.Account.Builder setAccountType(int value) {
      validate(fields()[1], value);
      this.accountType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'accountType' field has been set.
      * @return True if the 'accountType' field has been set, false otherwise.
      */
    public boolean hasAccountType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'accountType' field.
      * @return This builder.
      */
    public com.account.app.avro.Account.Builder clearAccountType() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'marketCap' field.
      * @return The value.
      */
    public int getMarketCap() {
      return marketCap;
    }


    /**
      * Sets the value of the 'marketCap' field.
      * @param value The value of 'marketCap'.
      * @return This builder.
      */
    public com.account.app.avro.Account.Builder setMarketCap(int value) {
      validate(fields()[2], value);
      this.marketCap = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'marketCap' field has been set.
      * @return True if the 'marketCap' field has been set, false otherwise.
      */
    public boolean hasMarketCap() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'marketCap' field.
      * @return This builder.
      */
    public com.account.app.avro.Account.Builder clearMarketCap() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'customer' field.
      * @return The value.
      */
    public java.util.List<com.account.app.avro.Customer> getCustomer() {
      return customer;
    }


    /**
      * Sets the value of the 'customer' field.
      * @param value The value of 'customer'.
      * @return This builder.
      */
    public com.account.app.avro.Account.Builder setCustomer(java.util.List<com.account.app.avro.Customer> value) {
      validate(fields()[3], value);
      this.customer = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'customer' field has been set.
      * @return True if the 'customer' field has been set, false otherwise.
      */
    public boolean hasCustomer() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'customer' field.
      * @return This builder.
      */
    public com.account.app.avro.Account.Builder clearCustomer() {
      customer = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @SuppressWarnings("unchecked")
    public Account build() {
      try {
        Account record = new Account();
        record.accountName = fieldSetFlags()[0] ? this.accountName : (java.lang.String) defaultValue(fields()[0]);
        record.accountType = fieldSetFlags()[1] ? this.accountType : (java.lang.Integer) defaultValue(fields()[1]);
        record.marketCap = fieldSetFlags()[2] ? this.marketCap : (java.lang.Integer) defaultValue(fields()[2]);
        record.customer = fieldSetFlags()[3] ? this.customer : (java.util.List<com.account.app.avro.Customer>) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Account>
    WRITER$ = (org.apache.avro.io.DatumWriter<Account>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Account>
    READER$ = (org.apache.avro.io.DatumReader<Account>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

 protected boolean hasCustomCoders() { return true; }

  public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.accountName);

    out.writeInt(this.accountType);

    out.writeInt(this.marketCap);

    long size0 = this.customer.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (com.account.app.avro.Customer e0: this.customer) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

 public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrder();
    if (fieldOrder == null) {
      this.accountName = in.readString();

      this.accountType = in.readInt();

      this.marketCap = in.readInt();

      long size0 = in.readArrayStart();
      java.util.List<com.account.app.avro.Customer> a0 = this.customer;
      if (a0 == null) {
        a0 = new SpecificData.Array<com.account.app.avro.Customer>((int)size0, SCHEMA$.getField("customer").schema());
        this.customer = a0;
      } else a0.clear();
      SpecificData.Array<com.account.app.avro.Customer> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.account.app.avro.Customer>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          com.account.app.avro.Customer e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new com.account.app.avro.Customer();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.accountName = in.readString();
          break;

        case 1:
          this.accountType = in.readInt();
          break;

        case 2:
          this.marketCap = in.readInt();
          break;

        case 3:
          long size0 = in.readArrayStart();
          java.util.List<com.account.app.avro.Customer> a0 = this.customer;
          if (a0 == null) {
            a0 = new SpecificData.Array<com.account.app.avro.Customer>((int)size0, SCHEMA$.getField("customer").schema());
            this.customer = a0;
          } else a0.clear();
          SpecificData.Array<com.account.app.avro.Customer> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.account.app.avro.Customer>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              com.account.app.avro.Customer e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new com.account.app.avro.Customer();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










